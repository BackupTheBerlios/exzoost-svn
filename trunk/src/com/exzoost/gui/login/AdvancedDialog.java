/*
 * AdvancedDialog.java
 *
 * Created on March 18, 2005, 1:34 AM
 */

package com.exzoost.gui.login;

import com.exzoost.database.ManipulateDB;
import com.exzoost.database.NewConnection;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author  knight
 */
public class AdvancedDialog extends javax.swing.JDialog {
    private ManipulateDB manipulate;
    private Connection conn = null;
    /** Creates new form AdvancedDialog */
    public AdvancedDialog(java.awt.Frame parent, boolean modal ) {
        super(parent, modal);
        initComponents();
        this.conn = conn;
        
        //make the advanced window in center of the screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int vpos = dim.height / 2 - getHeight() / 2;
        int hpos = dim.width / 2 - getWidth() / 2;
        setLocation( hpos, vpos );
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        DatabasaManagementLB = new javax.swing.JLabel();
        CreateDatabaseTF = new javax.swing.JTextField();
        CreateDatabase = new javax.swing.JButton();
        DropDatabaseTF = new javax.swing.JTextField();
        DropDatabase = new javax.swing.JButton();
        SuperUserLB = new javax.swing.JLabel();
        PasswordLB = new javax.swing.JLabel();
        SuperUserTF = new javax.swing.JTextField();
        PasswordTF = new javax.swing.JPasswordField();
        PortLB = new javax.swing.JLabel();
        PortTF = new javax.swing.JTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Advanced Dialog");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        DatabasaManagementLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DatabasaManagementLB.setText("Database Management Dialog");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(40, 20, 0, 20);
        getContentPane().add(DatabasaManagementLB, gridBagConstraints);

        CreateDatabaseTF.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 20, 0, 20);
        getContentPane().add(CreateDatabaseTF, gridBagConstraints);

        CreateDatabase.setText("Create New Database & Initialize It");
        CreateDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDatabaseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 20);
        getContentPane().add(CreateDatabase, gridBagConstraints);

        DropDatabaseTF.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 20, 0, 20);
        getContentPane().add(DropDatabaseTF, gridBagConstraints);

        DropDatabase.setText("Drop Database");
        DropDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DropDatabaseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 40, 20);
        getContentPane().add(DropDatabase, gridBagConstraints);

        SuperUserLB.setText("SuperUser Name : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(40, 20, 0, 0);
        getContentPane().add(SuperUserLB, gridBagConstraints);

        PasswordLB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PasswordLB.setText("Password : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 0);
        getContentPane().add(PasswordLB, gridBagConstraints);

        SuperUserTF.setColumns(12);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(40, 0, 0, 20);
        getContentPane().add(SuperUserTF, gridBagConstraints);

        PasswordTF.setColumns(12);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 20);
        getContentPane().add(PasswordTF, gridBagConstraints);

        PortLB.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PortLB.setText("Port : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 20, 0, 0);
        getContentPane().add(PortLB, gridBagConstraints);

        PortTF.setColumns(12);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 20);
        getContentPane().add(PortTF, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CreateDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDatabaseActionPerformed
        
        commonOperation();
        
        String db = CreateDatabaseTF.getText();
            
        //initialize manipulate class
        manipulate = new ManipulateDB( conn );
        if(manipulate.createDatabase( db ) ) {
            int n = JOptionPane.showConfirmDialog( null, "You have successfully created and " +
                    "initialized the database!\nWould you like to import data?", 
                    "Question", JOptionPane.YES_NO_OPTION );
            
            //he really wants to import data
            if(n==JOptionPane.YES_OPTION) {
                //import data from sql file
                //create the file chooser
                final JFileChooser fc = new JFileChooser();

                //in response to button click
                int returnVal = fc.showOpenDialog(null);

                if(returnVal == JFileChooser.APPROVE_OPTION) {
                    
                    FileConfigurationManipulate filemani = new FileConfigurationManipulate();
                    filemani.dummyPasswordFile( db, SuperUserTF.getText(), 
                            new String( PasswordTF.getPassword()), port );
                    
                    File importFile = fc.getSelectedFile();
                    manipulate.importDatabase(importFile, db, port);
                    
                    filemani.returnOriginalFile();
                    return;
                }
            }
            
            //so the user cancel the importing data or he say "no" for importing data
            FileConfigurationManipulate filemani = new FileConfigurationManipulate();
            filemani.dummyPasswordFile( db, SuperUserTF.getText(), 
                    new String( PasswordTF.getPassword()), port );
            
            manipulate.initializeEmptyDatabase( db, port );
            
            filemani.returnOriginalFile();
            return;
        }
        else {
            JOptionPane.showMessageDialog( null, "There is an error in creating and " +
                    "initialiazing database!", 
                    "Warning Message", JOptionPane.WARNING_MESSAGE );
        }
    }//GEN-LAST:event_CreateDatabaseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(conn!=null)
            NewConnection.closeConnection(conn);
    }//GEN-LAST:event_formWindowClosing

    private void commonOperation() {        
        port = PortTF.getText();
        
        props = new Properties();
        props.setProperty( "user", SuperUserTF.getText() );
        props.setProperty( "password", new String( PasswordTF.getPassword()) );
       
        url = "jdbc:postgresql://localhost/template1";
        
        //if postgresql db use different port
        if(!port.trim().equals("")) {
            url = "jdbc:postgresql://localhost:" + port + "/template1";
        }
        //url does not need default port but dummyPasswordFile need port explicitly even if default
        else {
            port = "5432";
        }
        
        //the connection
        try {
            conn = NewConnection.returnConnection( props, url );
        } catch( SQLException e ) {
            JOptionPane.showMessageDialog( null, e.getMessage(),
                    "Warning Message", JOptionPane.WARNING_MESSAGE );
            return;
        }
    }
    
    private void DropDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DropDatabaseActionPerformed
        //what is the answer????
        int n = JOptionPane.showConfirmDialog( this, "Do you really want to drop " +
                "this database?", "Question",
                JOptionPane.YES_NO_OPTION );
        
        //damn, he really want to delete the data from database
        if(n==JOptionPane.YES_OPTION) {

            commonOperation();
            
            String dropdb = DropDatabaseTF.getText();

            //initialize manipulate class
            manipulate = new ManipulateDB( conn );
            
            try {
                manipulate.dropDatabase(dropdb);
                JOptionPane.showMessageDialog( null, "You have successfully dropped database!", 
                        "Information Message", JOptionPane.INFORMATION_MESSAGE );
                //clear the text for convenience
                DropDatabaseTF.setText("");
            }
            catch( SQLException e ) {
                JOptionPane.showMessageDialog( null, e.getMessage(), 
                        "Warning Message", JOptionPane.WARNING_MESSAGE );
                return;
            }
        }
    }//GEN-LAST:event_DropDatabaseActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdvancedDialog(new javax.swing.JFrame(), true ).setVisible(true);
            }
        });
    }
    
    private String port;
    private Properties props;
    private String url;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateDatabase;
    private javax.swing.JTextField CreateDatabaseTF;
    private javax.swing.JLabel DatabasaManagementLB;
    private javax.swing.JButton DropDatabase;
    private javax.swing.JTextField DropDatabaseTF;
    private javax.swing.JLabel PasswordLB;
    private javax.swing.JPasswordField PasswordTF;
    private javax.swing.JLabel PortLB;
    private javax.swing.JTextField PortTF;
    private javax.swing.JLabel SuperUserLB;
    private javax.swing.JTextField SuperUserTF;
    // End of variables declaration//GEN-END:variables
    
}
