package com.exzoost.gui.inventory;
/*
 * AddSellerDialog.java
 *
 * Created on December 17, 2004, 1:59 PM
 */

import com.exzoost.database.ProducerDB;
import com.exzoost.database.SellerDB;
import com.exzoost.gui.helper.GuiHelper;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import com.exzoost.database.InventoryDB;
import java.sql.Connection;

/**
 *
 * @author  knight
 */
public class AddItemDialog extends javax.swing.JDialog {
    private String place;
    private Connection conn;
    private SellerDB sellerdb;
    private ProducerDB producerdb;
    private InventoryDB st;
    private DefaultListModel listModel = new DefaultListModel();
    private DefaultListModel itemsellerModel = new DefaultListModel();
    /** Creates new form AddSellerDialog */
    public AddItemDialog(java.awt.Frame parent, boolean modal, 
            String place, Connection conn ) {
        super(parent, modal);
        this.conn = conn;
        initComponents();
        
        GuiHelper.setOnCenter((Window)this);
        
        this.place = place;
        
        sellerdb = new SellerDB( conn );
        sellerdb.initializeSellerItem( listModel );
        
        producerdb = new ProducerDB( conn );
        producerdb.initializeComboBoxProducer(ProducerCoB);
        
        st = new InventoryDB( conn );
        itemCodeTF.setText( st.initializeDefaultItemCode() );
        
        VolumeCheckBoxActionPerformed(null);
        
        //add cubic label
        char cubic = '\u00b3';
        VolumeLabel.setText( "Volume ( cm" + cubic + " ) : ");
                
        //setup default button
        getRootPane().setDefaultButton(OK);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        BottomPanel = new javax.swing.JPanel();
        Cancel = new javax.swing.JButton();
        OK = new javax.swing.JButton();
        DummyTopLabel = new javax.swing.JLabel();
        LeftDummyLabel = new javax.swing.JLabel();
        RightDummyLabel = new javax.swing.JLabel();
        ItemTabbedPane = new javax.swing.JTabbedPane();
        ItemPanel = new javax.swing.JPanel();
        ItemCodeLabel = new javax.swing.JLabel();
        itemCodeTF = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        buyingPriceLabel = new javax.swing.JLabel();
        buyingPriceTF = new javax.swing.JTextField();
        salePriceLabel = new javax.swing.JLabel();
        salePriceTF = new javax.swing.JTextField();
        commentLabel = new javax.swing.JLabel();
        commentTA = new javax.swing.JTextArea();
        Notes1 = new javax.swing.JLabel();
        Notes2 = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        categoryTF = new javax.swing.JTextField();
        AdditionalPropertiesPanel = new javax.swing.JPanel();
        DetailSizeCheckBox = new javax.swing.JCheckBox();
        LengthLabel = new javax.swing.JLabel();
        LengthTF = new javax.swing.JTextField();
        WidthLabel = new javax.swing.JLabel();
        WidthTF = new javax.swing.JTextField();
        HeightLabel = new javax.swing.JLabel();
        HeightTF = new javax.swing.JTextField();
        VolumeCheckBox = new javax.swing.JCheckBox();
        VolumeLabel = new javax.swing.JLabel();
        VolumeTF = new javax.swing.JTextField();
        PrimaryMeasurementLabel = new javax.swing.JLabel();
        PrimaryTF = new javax.swing.JTextField();
        MeasurementLabel = new javax.swing.JLabel();
        MeasurementTF = new javax.swing.JTextField();
        SecondaryMeasurementLabel = new javax.swing.JLabel();
        SecondaryTF = new javax.swing.JTextField();
        Notes3 = new javax.swing.JLabel();
        Notes4 = new javax.swing.JLabel();
        Secondary_Third_Measurement_Label = new javax.swing.JLabel();
        SecondaryThirdMeasurementTF = new javax.swing.JTextField();
        ThirdTF = new javax.swing.JTextField();
        Third_Measurement_Label = new javax.swing.JLabel();
        OtherPanel = new javax.swing.JPanel();
        ProducerLB = new javax.swing.JLabel();
        AvailableSeller = new javax.swing.JScrollPane();
        AvSel = new javax.swing.JList( listModel );
        AddSeller = new javax.swing.JButton();
        RemoveSeller = new javax.swing.JButton();
        ListSeller = new javax.swing.JScrollPane();
        LsSel = new javax.swing.JList( itemsellerModel );
        AvailableSellers = new javax.swing.JLabel();
        ItemSellers = new javax.swing.JLabel();
        ProducerCoB = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Item");
        BottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 10));

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        BottomPanel.add(Cancel);

        OK.setText("OK");
        OK.setPreferredSize(new java.awt.Dimension(75, 25));
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        BottomPanel.add(OK);

        getContentPane().add(BottomPanel, java.awt.BorderLayout.SOUTH);

        DummyTopLabel.setText("                ");
        getContentPane().add(DummyTopLabel, java.awt.BorderLayout.NORTH);

        LeftDummyLabel.setText("     ");
        getContentPane().add(LeftDummyLabel, java.awt.BorderLayout.WEST);

        RightDummyLabel.setText("     ");
        getContentPane().add(RightDummyLabel, java.awt.BorderLayout.EAST);

        ItemPanel.setLayout(new java.awt.GridBagLayout());

        ItemPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ItemCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ItemCodeLabel.setText("* Item Code : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        ItemPanel.add(ItemCodeLabel, gridBagConstraints);

        itemCodeTF.setColumns(12);
        itemCodeTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        ItemPanel.add(itemCodeTF, gridBagConstraints);

        nameLabel.setText("* Name : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        ItemPanel.add(nameLabel, gridBagConstraints);

        nameTF.setColumns(12);
        nameTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        ItemPanel.add(nameTF, gridBagConstraints);

        buyingPriceLabel.setText("* Buying Price : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        ItemPanel.add(buyingPriceLabel, gridBagConstraints);

        buyingPriceTF.setColumns(12);
        buyingPriceTF.setFont(new java.awt.Font("Dialog", 1, 12));
        buyingPriceTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        ItemPanel.add(buyingPriceTF, gridBagConstraints);

        salePriceLabel.setText("* Sale Price : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        ItemPanel.add(salePriceLabel, gridBagConstraints);

        salePriceTF.setColumns(12);
        salePriceTF.setFont(new java.awt.Font("Dialog", 1, 12));
        salePriceTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        ItemPanel.add(salePriceTF, gridBagConstraints);

        commentLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        commentLabel.setText("Comment : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        ItemPanel.add(commentLabel, gridBagConstraints);

        commentTA.setColumns(16);
        commentTA.setLineWrap(true);
        commentTA.setRows(6);
        commentTA.setTabSize(4);
        commentTA.setWrapStyleWord(true);
        commentTA.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ItemPanel.add(commentTA, gridBagConstraints);

        Notes1.setText("Fields marked with an asterisk * are required.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        ItemPanel.add(Notes1, gridBagConstraints);

        Notes2.setText("<html><center>Choose either Detail of Size checkbox <br>\nor Volume checkbox then fill all the text <br>\nfields of that checkbox!</center></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        ItemPanel.add(Notes2, gridBagConstraints);

        categoryLabel.setText("* Category : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        ItemPanel.add(categoryLabel, gridBagConstraints);

        categoryTF.setColumns(12);
        categoryTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        ItemPanel.add(categoryTF, gridBagConstraints);

        ItemTabbedPane.addTab("Item", ItemPanel);

        AdditionalPropertiesPanel.setLayout(new java.awt.GridBagLayout());

        DetailSizeCheckBox.setText("Detail of Size");
        DetailSizeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailSizeCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        AdditionalPropertiesPanel.add(DetailSizeCheckBox, gridBagConstraints);

        LengthLabel.setText("Length ( cm ) : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(LengthLabel, gridBagConstraints);

        LengthTF.setColumns(12);
        LengthTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(LengthTF, gridBagConstraints);

        WidthLabel.setText("Width ( cm ) : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(WidthLabel, gridBagConstraints);

        WidthTF.setColumns(12);
        WidthTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(WidthTF, gridBagConstraints);

        HeightLabel.setText("Height ( cm ) : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(HeightLabel, gridBagConstraints);

        HeightTF.setColumns(12);
        HeightTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(HeightTF, gridBagConstraints);

        VolumeCheckBox.setText("Volume");
        VolumeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolumeCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        AdditionalPropertiesPanel.add(VolumeCheckBox, gridBagConstraints);

        VolumeLabel.setText("Volume ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(VolumeLabel, gridBagConstraints);

        VolumeTF.setColumns(12);
        VolumeTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(VolumeTF, gridBagConstraints);

        PrimaryMeasurementLabel.setText("* Primary Measurement : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(PrimaryMeasurementLabel, gridBagConstraints);

        PrimaryTF.setColumns(12);
        PrimaryTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(PrimaryTF, gridBagConstraints);

        MeasurementLabel.setText("* =");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(MeasurementLabel, gridBagConstraints);

        MeasurementTF.setColumns(12);
        MeasurementTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(MeasurementTF, gridBagConstraints);

        SecondaryMeasurementLabel.setText("* Secondary Measurement : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(SecondaryMeasurementLabel, gridBagConstraints);

        SecondaryTF.setColumns(12);
        SecondaryTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(SecondaryTF, gridBagConstraints);

        Notes3.setText("<html><center>Choose either Detail of Size checkbox <br>\nor Volume checkbox then fill all the text <br>\nfields of that checkbox!</center></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        AdditionalPropertiesPanel.add(Notes3, gridBagConstraints);

        Notes4.setText("Fields marked with an asterisk * are required.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        AdditionalPropertiesPanel.add(Notes4, gridBagConstraints);

        Secondary_Third_Measurement_Label.setText("S = T : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(Secondary_Third_Measurement_Label, gridBagConstraints);

        SecondaryThirdMeasurementTF.setColumns(12);
        SecondaryThirdMeasurementTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(SecondaryThirdMeasurementTF, gridBagConstraints);

        ThirdTF.setColumns(12);
        ThirdTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(ThirdTF, gridBagConstraints);

        Third_Measurement_Label.setText("Third Measurement : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(Third_Measurement_Label, gridBagConstraints);

        ItemTabbedPane.addTab("Additional Properties", AdditionalPropertiesPanel);

        OtherPanel.setLayout(new java.awt.GridBagLayout());

        ProducerLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProducerLB.setText("Producer : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        OtherPanel.add(ProducerLB, gridBagConstraints);

        AvailableSeller.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        AvailableSeller.setPreferredSize(new java.awt.Dimension(200, 100));
        AvSel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AvSel.setVisibleRowCount(-1);
        AvailableSeller.setViewportView(AvSel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        OtherPanel.add(AvailableSeller, gridBagConstraints);

        AddSeller.setText(">");
        AddSeller.setName("toRight");
        AddSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveSellerActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        OtherPanel.add(AddSeller, gridBagConstraints);

        RemoveSeller.setText("<");
        RemoveSeller.setName("toLeft");
        RemoveSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveSellerActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        OtherPanel.add(RemoveSeller, gridBagConstraints);

        ListSeller.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ListSeller.setPreferredSize(new java.awt.Dimension(200, 100));
        LsSel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        LsSel.setVisibleRowCount(-1);
        ListSeller.setViewportView(LsSel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        OtherPanel.add(ListSeller, gridBagConstraints);

        AvailableSellers.setText("Available Sellers : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        OtherPanel.add(AvailableSellers, gridBagConstraints);

        ItemSellers.setText("Item Sellers : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        OtherPanel.add(ItemSellers, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        OtherPanel.add(ProducerCoB, gridBagConstraints);

        ItemTabbedPane.addTab("Producer & Seller", OtherPanel);

        getContentPane().add(ItemTabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MoveSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveSellerActionPerformed
        JButton button = (JButton)evt.getSource();
        
        if(button.getName().equals("toRight")) {
            sellerdb.moveSellerItem( AvSel, LsSel );
        }
        else if(button.getName().equals("toLeft")) {
            sellerdb.moveSellerItem( LsSel, AvSel );
        }
    }//GEN-LAST:event_MoveSellerActionPerformed

    private void DetailSizeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailSizeCheckBoxActionPerformed
        //add cubic label
        char cubic = '\u00b3';
        
        if(!DetailSizeCheckBox.isSelected()) {
            //select the volume checkbox
            VolumeCheckBox.setSelected(true);

            //enable the volume text field
            VolumeTF.setEnabled(true);
            VolumeLabel.setText( "* Volume ( cm" + cubic + " ) : ");

            //disable the detail of size text field
            LengthTF.setText("");
            LengthTF.setEnabled(false);
            LengthLabel.setText("Length ( cm ) : ");
            WidthTF.setText("");
            WidthTF.setEnabled(false);
            WidthLabel.setText("Width ( cm ) : ");
            HeightTF.setText("");
            HeightTF.setEnabled(false);
            HeightLabel.setText("Height ( cm ) : ");
        }
        else {
            //dis-select the volume checkbox
            VolumeCheckBox.setSelected(false);
            VolumeLabel.setText( "Volume ( cm" + cubic + " ) : ");

            //empty the volume text field and disable it
            VolumeTF.setText("");
            VolumeTF.setEnabled(false);

            //reenable the detail of size text field
            LengthTF.setEnabled(true);
            LengthLabel.setText("* Length ( cm ) : ");
            WidthTF.setEnabled(true);
            WidthLabel.setText("* Width ( cm ) : ");
            HeightTF.setEnabled(true);   
            HeightLabel.setText("* Height ( cm ) : ");
        }
    }//GEN-LAST:event_DetailSizeCheckBoxActionPerformed

    private void VolumeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolumeCheckBoxActionPerformed
        //add cubic label
        char cubic = '\u00b3';
        
        //if user de-select volume of size
        if(!VolumeCheckBox.isSelected()) {
            //select the detail checkbox
            DetailSizeCheckBox.setSelected(true);

            //disable the volume text field
            VolumeTF.setEnabled(false);
            VolumeTF.setText("");
            VolumeLabel.setText( "Volume ( cm" + cubic + " ) : ");

            //reenable the detail of size text field
            LengthTF.setEnabled(true);
            LengthLabel.setText("* Length ( cm ) : ");
            WidthTF.setEnabled(true);
            WidthLabel.setText("* Width ( cm ) : ");
            HeightTF.setEnabled(true);   
            HeightLabel.setText("* Height ( cm ) : ");
        }
        else {
            //dis-select the detail checkbox
            DetailSizeCheckBox.setSelected(false);

            //empty the detail text field and disable it
            LengthTF.setText("");
            LengthTF.setEnabled(false);
            LengthLabel.setText("Length ( cm ) : ");
            WidthTF.setText("");
            WidthTF.setEnabled(false);
            WidthLabel.setText("Width ( cm ) : ");
            HeightTF.setText("");
            HeightTF.setEnabled(false);
            HeightLabel.setText("Height ( cm ) : ");

            //reenable volume text field
            VolumeTF.setEnabled(true);    
            VolumeLabel.setText( "* Volume ( cm" + cubic + " ) : ");
        }
    }//GEN-LAST:event_VolumeCheckBoxActionPerformed

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        //the tabbed pane
        final int item = 0;
        final int additional = 1;
        final int prodandsel = 2;
        
        //get data from text field
        String name = nameTF.getText().trim();
        String itemcode = itemCodeTF.getText().trim();
        String saleprice = salePriceTF.getText().trim();
        String buyingprice = buyingPriceTF.getText().trim();
        String comment = commentTA.getText();
        String primary = PrimaryTF.getText().trim();
        String measurement = MeasurementTF.getText().trim();
        String secondary = SecondaryTF.getText().trim();
        String volume, length, width, height;
        Integer intvolume, intlength, intwidth, intheight;
        String category = categoryTF.getText().trim();
        String producer = (String)ProducerCoB.getSelectedItem();
        
        //update: 3 july 2006, two additional text field
        String secondarythirdmeasurement = SecondaryThirdMeasurementTF.getText().trim();
        String third = ThirdTF.getText().trim();
        
        //make sure the required fields are not empty
        if(itemcode.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Item Code Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            itemCodeTF.requestFocusInWindow();
            return;
        }
        
        if(category.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Category Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            categoryTF.requestFocusInWindow();
            return;
        }
        
        if(name.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Name Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            nameTF.requestFocusInWindow();
            return;
        }
        
        if(buyingprice.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Buying Price Text " +
                    "Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            buyingPriceTF.requestFocusInWindow();
            return;
        }
        
        if(saleprice.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Sale Price Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            salePriceTF.requestFocusInWindow();
            return;
        }
                
        //if user fill the volume
        if(VolumeCheckBox.isSelected()) {
            volume = VolumeTF.getText().trim();
            if(volume.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Volume Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                VolumeTF.requestFocusInWindow();
                return;
            }
            intvolume = Integer.parseInt(volume);
            intlength = null;
            intwidth = null;
            intheight = null;
        }
        else { 
            length = LengthTF.getText().trim();
            if(length.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Length Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                LengthTF.requestFocusInWindow();
                return;
            }
            width = WidthTF.getText().trim();
            if(width.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Width Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                WidthTF.requestFocusInWindow();
                return;
            }
            height = HeightTF.getText().trim();
            if(height.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Height Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                HeightTF.requestFocusInWindow();
                return;
            }
            intlength = Integer.parseInt(length);
            intwidth = Integer.parseInt(width);
            intheight = Integer.parseInt(height);
            intvolume = intlength * intwidth * intheight;
        }
        
        if(primary.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Primary Measurement " +
                    "Text Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(additional);
            PrimaryTF.requestFocusInWindow();
            return;
        }

        if(secondary.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Secondary Measurement " +
                    "Text Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(additional);
            SecondaryTF.requestFocusInWindow();
            return;
        }
        
        if(measurement.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Measurement " +
                    "Text Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(additional);
            MeasurementTF.requestFocusInWindow();
            return;
        }
        
        //check if the name is already there
        if(st.isAlreadyThereItem(name)) {
            JOptionPane.showMessageDialog(null,"The item name is already there in database! " +
                    "Choose another name!", "Warning", JOptionPane.WARNING_MESSAGE );
            return;
        }
        
        boolean result = st.insertItem( name, itemcode, Integer.parseInt(saleprice), 
                Integer.parseInt(buyingprice), comment,
                intlength, intwidth, intheight, intvolume, primary, secondary, 
                Integer.parseInt(measurement), category, producer, third, 
                secondarythirdmeasurement, itemsellerModel );
        
        //error inserting item
        if(!result)
            JOptionPane.showMessageDialog(null,"Error adding item! See log file " +
                    "for detail!", "Warning", JOptionPane.WARNING_MESSAGE );
        else
            JOptionPane.showMessageDialog(null,"Success adding item.", 
                    "Success Message", JOptionPane.INFORMATION_MESSAGE );
        
        dispose();
    }//GEN-LAST:event_OKActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        dispose();
    }//GEN-LAST:event_CancelActionPerformed
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSeller;
    private javax.swing.JPanel AdditionalPropertiesPanel;
    private javax.swing.JList AvSel;
    private javax.swing.JScrollPane AvailableSeller;
    private javax.swing.JLabel AvailableSellers;
    private javax.swing.JPanel BottomPanel;
    private javax.swing.JButton Cancel;
    private javax.swing.JCheckBox DetailSizeCheckBox;
    private javax.swing.JLabel DummyTopLabel;
    private javax.swing.JLabel HeightLabel;
    private javax.swing.JTextField HeightTF;
    private javax.swing.JLabel ItemCodeLabel;
    private javax.swing.JPanel ItemPanel;
    private javax.swing.JLabel ItemSellers;
    private javax.swing.JTabbedPane ItemTabbedPane;
    private javax.swing.JLabel LeftDummyLabel;
    private javax.swing.JLabel LengthLabel;
    private javax.swing.JTextField LengthTF;
    private javax.swing.JScrollPane ListSeller;
    private javax.swing.JList LsSel;
    private javax.swing.JLabel MeasurementLabel;
    private javax.swing.JTextField MeasurementTF;
    private javax.swing.JLabel Notes1;
    private javax.swing.JLabel Notes2;
    private javax.swing.JLabel Notes3;
    private javax.swing.JLabel Notes4;
    private javax.swing.JButton OK;
    private javax.swing.JPanel OtherPanel;
    private javax.swing.JLabel PrimaryMeasurementLabel;
    private javax.swing.JTextField PrimaryTF;
    private javax.swing.JComboBox ProducerCoB;
    private javax.swing.JLabel ProducerLB;
    private javax.swing.JButton RemoveSeller;
    private javax.swing.JLabel RightDummyLabel;
    private javax.swing.JLabel SecondaryMeasurementLabel;
    private javax.swing.JTextField SecondaryTF;
    private javax.swing.JTextField SecondaryThirdMeasurementTF;
    private javax.swing.JLabel Secondary_Third_Measurement_Label;
    private javax.swing.JTextField ThirdTF;
    private javax.swing.JLabel Third_Measurement_Label;
    private javax.swing.JCheckBox VolumeCheckBox;
    private javax.swing.JLabel VolumeLabel;
    private javax.swing.JTextField VolumeTF;
    private javax.swing.JLabel WidthLabel;
    private javax.swing.JTextField WidthTF;
    private javax.swing.JLabel buyingPriceLabel;
    private javax.swing.JTextField buyingPriceTF;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JTextField categoryTF;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JTextArea commentTA;
    private javax.swing.JTextField itemCodeTF;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JLabel salePriceLabel;
    private javax.swing.JTextField salePriceTF;
    // End of variables declaration//GEN-END:variables
    
}
