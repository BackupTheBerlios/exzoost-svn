package com.exzoost.gui.inventory;
/*
 * AddSellerDialog.java
 *
 * Created on December 17, 2004, 1:59 PM
 */

import com.exzoost.database.ProducerDB;
import com.exzoost.gui.helper.GuiHelper;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import com.exzoost.database.SellerDB;
import com.exzoost.database.InventoryDB;
import java.sql.Connection;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author  knight
 */
public class EditItemDialog extends javax.swing.JDialog {
    private int beginningsupply, supply;
    private Connection conn;
    private DefaultListModel listModel = new DefaultListModel();
    private DefaultListModel itemsellerModel = new DefaultListModel();
    private SellerDB sellerdb;
    private ProducerDB producerdb;
    private InventoryDB st;
    private int row;
    private int quantity_row_length;
    private String item_code;
    private int itemindex;
    /** Creates new form AddSellerDialog */
    public EditItemDialog(java.awt.Frame parent, boolean modal, 
            JTable table, Connection conn ) {
        super(parent, modal);
        this.conn = conn;
        initComponents();
        
        GuiHelper.setOnCenter((Window)this);
        
        this.table = table;
        
        row = table.getSelectedRow();
        
        item_code = (String)table.getModel().getValueAt(row,0);
        
        //set data on dialog text field
        itemCodeTF.setText(item_code);
        nameTF.setText((String)table.getModel().getValueAt(row,2));
        categoryTF.setText( (String)table.getModel().getValueAt(row,1));
        
        //just use plain number instead the currency format
        NumberFormat nf = NumberFormat.getCurrencyInstance(new Locale("id","id"));
        try {
            buyingPriceTF.setText( (nf.parse(
                    (String)table.getModel().getValueAt(row,3))).toString() );
            salePriceTF.setText( (nf.parse(
                    (String)table.getModel().getValueAt(row,4))).toString() );
        }
        catch(java.text.ParseException pe) {
            pe.printStackTrace();
        }
        
        commentTA.setText( (String)table.getModel().getValueAt(row,6) );
        
        //if length field is null, then deselect the detail size of checkbox
        if( ((Integer)table.getModel().getValueAt(row,8)).intValue()==0) {
            DetailSizeCheckBoxActionPerformed(null);
            VolumeTF.setText( ((Integer)table.getModel().getValueAt(row,11)).toString() );
        }
        //if length, width, height field are not null, then deselect the volume checkbox
        else {
            VolumeCheckBoxActionPerformed(null);
            LengthTF.setText( ((Integer)table.getModel().getValueAt(row,8)).toString() );
            WidthTF.setText( ((Integer)table.getModel().getValueAt(row,9)).toString() );
            HeightTF.setText( ((Integer)table.getModel().getValueAt(row,10)).toString() );
            VolumeTF.setText( ((Integer)table.getModel().getValueAt(row,11)).toString() );
        }
        
        PrimaryTF.setText( (String)table.getModel().getValueAt(row,12) );
        MeasurementTF.setText( ((Integer)table.getModel().getValueAt(row,13)).toString() );
        SecondaryTF.setText( (String)table.getModel().getValueAt(row,14) );
        SecondaryThirdMeasurementTF.setText( ((Integer)table.getModel().getValueAt(row,17)).toString() );
        ThirdTF.setText( (String)table.getModel().getValueAt(row,18) );
        
        producerdb = new ProducerDB( conn );
        producerdb.initializeComboBoxProducer(ProducerCoB);
        ProducerCoB.setSelectedItem( (String)table.getModel().getValueAt(row,15) );
        
        sellerdb = new SellerDB( conn );
        sellerdb.initializeSellerItem( listModel );
        sellerdb.initializeSuplierForItem( itemsellerModel, (String)table.getModel().getValueAt(row,2) );
        sellerdb.harmonizeSellerItem( listModel, itemsellerModel );
        
        st = new InventoryDB(conn);
        
        st.initializeComboBox(WarehouseCB,"warehouse");
                
        getRootPane().setDefaultButton(OK);
        
        itemindex = st.getItemIndex(item_code);
        
        //select warehousecombo box programmatically so quantity and expired date is set up
        WarehouseCB.setSelectedIndex(0);
        
        QuantityTB.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        BottomPanel = new javax.swing.JPanel();
        Cancel = new javax.swing.JButton();
        OK = new javax.swing.JButton();
        DummyTopLabel = new javax.swing.JLabel();
        LeftDummyLabel = new javax.swing.JLabel();
        RightDummyLabel = new javax.swing.JLabel();
        ItemTabbedPane = new javax.swing.JTabbedPane();
        ItemPanel = new javax.swing.JPanel();
        ItemCodeLabel = new javax.swing.JLabel();
        itemCodeTF = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        buyingPriceLabel = new javax.swing.JLabel();
        buyingPriceTF = new javax.swing.JTextField();
        salePriceLabel = new javax.swing.JLabel();
        salePriceTF = new javax.swing.JTextField();
        commentLabel = new javax.swing.JLabel();
        commentTA = new javax.swing.JTextArea();
        Notes1 = new javax.swing.JLabel();
        Notes2 = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        categoryTF = new javax.swing.JTextField();
        AdditionalPropertiesPanel = new javax.swing.JPanel();
        DetailSizeCheckBox = new javax.swing.JCheckBox();
        LengthLabel = new javax.swing.JLabel();
        LengthTF = new javax.swing.JTextField();
        WidthLabel = new javax.swing.JLabel();
        WidthTF = new javax.swing.JTextField();
        HeightLabel = new javax.swing.JLabel();
        HeightTF = new javax.swing.JTextField();
        VolumeCheckBox = new javax.swing.JCheckBox();
        VolumeLabel = new javax.swing.JLabel();
        VolumeTF = new javax.swing.JTextField();
        PrimaryMeasurementLabel = new javax.swing.JLabel();
        PrimaryTF = new javax.swing.JTextField();
        MeasurementLabel = new javax.swing.JLabel();
        MeasurementTF = new javax.swing.JTextField();
        SecondaryMeasurementLabel = new javax.swing.JLabel();
        SecondaryTF = new javax.swing.JTextField();
        Notes3 = new javax.swing.JLabel();
        Notes4 = new javax.swing.JLabel();
        Secondary_Third_Measurement_Label = new javax.swing.JLabel();
        Third_Measurement_Label = new javax.swing.JLabel();
        SecondaryThirdMeasurementTF = new javax.swing.JTextField();
        ThirdTF = new javax.swing.JTextField();
        OtherPanel = new javax.swing.JPanel();
        ProducerLB = new javax.swing.JLabel();
        AvailableSeller = new javax.swing.JScrollPane();
        AvSel = new javax.swing.JList( listModel );
        AddSeller = new javax.swing.JButton();
        RemoveSeller = new javax.swing.JButton();
        ListSeller = new javax.swing.JScrollPane();
        LsSel = new javax.swing.JList( itemsellerModel );
        AvailableSellers = new javax.swing.JLabel();
        ItemSellers = new javax.swing.JLabel();
        ProducerCoB = new javax.swing.JComboBox();
        QuantityPanel = new javax.swing.JPanel();
        QuantityTablePanel = new javax.swing.JPanel();
        QuantityScrollPane = new javax.swing.JScrollPane();
        QuantityTB = new javax.swing.JTable();
        PropertiesPanel = new javax.swing.JPanel();
        WarehouseCB = new javax.swing.JComboBox();
        QuantityLB = new javax.swing.JLabel();
        QuantityButtonPanel = new javax.swing.JPanel();
        QuantityAddButton = new javax.swing.JButton();
        QuantityEditButton = new javax.swing.JButton();
        QuantityDeleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Item");
        BottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 10));

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        BottomPanel.add(Cancel);

        OK.setText("OK");
        OK.setPreferredSize(new java.awt.Dimension(75, 25));
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        BottomPanel.add(OK);

        getContentPane().add(BottomPanel, java.awt.BorderLayout.SOUTH);

        DummyTopLabel.setText("                ");
        getContentPane().add(DummyTopLabel, java.awt.BorderLayout.NORTH);

        LeftDummyLabel.setText("     ");
        getContentPane().add(LeftDummyLabel, java.awt.BorderLayout.WEST);

        RightDummyLabel.setText("     ");
        getContentPane().add(RightDummyLabel, java.awt.BorderLayout.EAST);

        ItemPanel.setLayout(new java.awt.GridBagLayout());

        ItemPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        ItemCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ItemCodeLabel.setText("* Item Code : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        ItemPanel.add(ItemCodeLabel, gridBagConstraints);

        itemCodeTF.setColumns(12);
        itemCodeTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        ItemPanel.add(itemCodeTF, gridBagConstraints);

        nameLabel.setText("* Name : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        ItemPanel.add(nameLabel, gridBagConstraints);

        nameTF.setColumns(12);
        nameTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        ItemPanel.add(nameTF, gridBagConstraints);

        buyingPriceLabel.setText("* Buying Price : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 10);
        ItemPanel.add(buyingPriceLabel, gridBagConstraints);

        buyingPriceTF.setColumns(12);
        buyingPriceTF.setFont(new java.awt.Font("Dialog", 1, 12));
        buyingPriceTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        ItemPanel.add(buyingPriceTF, gridBagConstraints);

        salePriceLabel.setText("* Sale Price : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 10);
        ItemPanel.add(salePriceLabel, gridBagConstraints);

        salePriceTF.setColumns(12);
        salePriceTF.setFont(new java.awt.Font("Dialog", 1, 12));
        salePriceTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        ItemPanel.add(salePriceTF, gridBagConstraints);

        commentLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        commentLabel.setText("Comment : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        ItemPanel.add(commentLabel, gridBagConstraints);

        commentTA.setColumns(16);
        commentTA.setLineWrap(true);
        commentTA.setRows(6);
        commentTA.setTabSize(4);
        commentTA.setWrapStyleWord(true);
        commentTA.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ItemPanel.add(commentTA, gridBagConstraints);

        Notes1.setText("Fields marked with an asterisk * are required.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        ItemPanel.add(Notes1, gridBagConstraints);

        Notes2.setText("<html><center>Choose either Detail of Size checkbox <br>\nor Volume checkbox then fill all the text <br>\nfields of that checkbox!</center></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        ItemPanel.add(Notes2, gridBagConstraints);

        categoryLabel.setText("* Category : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        ItemPanel.add(categoryLabel, gridBagConstraints);

        categoryTF.setColumns(12);
        categoryTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        ItemPanel.add(categoryTF, gridBagConstraints);

        ItemTabbedPane.addTab("Item", ItemPanel);

        AdditionalPropertiesPanel.setLayout(new java.awt.GridBagLayout());

        DetailSizeCheckBox.setText("Detail of Size");
        DetailSizeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailSizeCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        AdditionalPropertiesPanel.add(DetailSizeCheckBox, gridBagConstraints);

        LengthLabel.setText("Length : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(LengthLabel, gridBagConstraints);

        LengthTF.setColumns(12);
        LengthTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(LengthTF, gridBagConstraints);

        WidthLabel.setText("Width : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(WidthLabel, gridBagConstraints);

        WidthTF.setColumns(12);
        WidthTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(WidthTF, gridBagConstraints);

        HeightLabel.setText("Height : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(HeightLabel, gridBagConstraints);

        HeightTF.setColumns(12);
        HeightTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(HeightTF, gridBagConstraints);

        VolumeCheckBox.setText("Volume");
        VolumeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolumeCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        AdditionalPropertiesPanel.add(VolumeCheckBox, gridBagConstraints);

        VolumeLabel.setText("Volume : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(VolumeLabel, gridBagConstraints);

        VolumeTF.setColumns(12);
        VolumeTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(VolumeTF, gridBagConstraints);

        PrimaryMeasurementLabel.setText("* Primary Measurement : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(PrimaryMeasurementLabel, gridBagConstraints);

        PrimaryTF.setColumns(12);
        PrimaryTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(PrimaryTF, gridBagConstraints);

        MeasurementLabel.setText("* P = S : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(MeasurementLabel, gridBagConstraints);

        MeasurementTF.setColumns(12);
        MeasurementTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(MeasurementTF, gridBagConstraints);

        SecondaryMeasurementLabel.setText("* Secondary Measurement : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(SecondaryMeasurementLabel, gridBagConstraints);

        SecondaryTF.setColumns(12);
        SecondaryTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(SecondaryTF, gridBagConstraints);

        Notes3.setText("<html><center>Choose either Detail of Size checkbox <br>\nor Volume checkbox then fill all the text <br>\nfields of that checkbox!</center></html>");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        AdditionalPropertiesPanel.add(Notes3, gridBagConstraints);

        Notes4.setText("Fields marked with an asterisk * are required.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        AdditionalPropertiesPanel.add(Notes4, gridBagConstraints);

        Secondary_Third_Measurement_Label.setText("S = T : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(Secondary_Third_Measurement_Label, gridBagConstraints);

        Third_Measurement_Label.setText("Third Measurement : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        AdditionalPropertiesPanel.add(Third_Measurement_Label, gridBagConstraints);

        SecondaryThirdMeasurementTF.setColumns(12);
        SecondaryThirdMeasurementTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(SecondaryThirdMeasurementTF, gridBagConstraints);

        ThirdTF.setColumns(12);
        ThirdTF.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        AdditionalPropertiesPanel.add(ThirdTF, gridBagConstraints);

        ItemTabbedPane.addTab("Additional Properties", AdditionalPropertiesPanel);

        OtherPanel.setLayout(new java.awt.GridBagLayout());

        ProducerLB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ProducerLB.setText("Producer : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        OtherPanel.add(ProducerLB, gridBagConstraints);

        AvailableSeller.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        AvailableSeller.setPreferredSize(new java.awt.Dimension(200, 100));
        AvSel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        AvSel.setVisibleRowCount(-1);
        AvailableSeller.setViewportView(AvSel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        OtherPanel.add(AvailableSeller, gridBagConstraints);

        AddSeller.setText(">");
        AddSeller.setName("toRight");
        AddSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveSellerActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        OtherPanel.add(AddSeller, gridBagConstraints);

        RemoveSeller.setText("<");
        RemoveSeller.setName("toLeft");
        RemoveSeller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveSellerActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        OtherPanel.add(RemoveSeller, gridBagConstraints);

        ListSeller.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ListSeller.setPreferredSize(new java.awt.Dimension(200, 100));
        LsSel.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        LsSel.setVisibleRowCount(-1);
        ListSeller.setViewportView(LsSel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        OtherPanel.add(ListSeller, gridBagConstraints);

        AvailableSellers.setText("Available Sellers : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        OtherPanel.add(AvailableSellers, gridBagConstraints);

        ItemSellers.setText("Item Sellers : ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        OtherPanel.add(ItemSellers, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        OtherPanel.add(ProducerCoB, gridBagConstraints);

        ItemTabbedPane.addTab("Producer & Seller", OtherPanel);

        QuantityTablePanel.setLayout(new java.awt.BorderLayout());

        QuantityTB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        QuantityScrollPane.setViewportView(QuantityTB);

        QuantityTablePanel.add(QuantityScrollPane, java.awt.BorderLayout.CENTER);

        WarehouseCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        WarehouseCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WarehouseCBActionPerformed(evt);
            }
        });

        PropertiesPanel.add(WarehouseCB);

        QuantityLB.setText("jLabel1");
        PropertiesPanel.add(QuantityLB);

        QuantityTablePanel.add(PropertiesPanel, java.awt.BorderLayout.NORTH);

        QuantityAddButton.setText("Add");
        QuantityAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityAddButtonActionPerformed(evt);
            }
        });

        QuantityButtonPanel.add(QuantityAddButton);

        QuantityEditButton.setText("Edit");
        QuantityEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityEditButtonActionPerformed(evt);
            }
        });

        QuantityButtonPanel.add(QuantityEditButton);

        QuantityDeleteButton.setText("Delete");
        QuantityDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantityDeleteButtonActionPerformed(evt);
            }
        });

        QuantityButtonPanel.add(QuantityDeleteButton);

        QuantityTablePanel.add(QuantityButtonPanel, java.awt.BorderLayout.SOUTH);

        QuantityPanel.add(QuantityTablePanel);

        ItemTabbedPane.addTab("Quantity", QuantityPanel);

        getContentPane().add(ItemTabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QuantityDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityDeleteButtonActionPerformed
        int warehouseindex = getWarehouseIndex();
        if(warehouseindex==-1) 
            return;
        
        int selected_row = QuantityTB.getSelectedRow();
        if(selected_row==-1||QuantityTB.getValueAt(selected_row,1)==null)
            return;
        String date = (String)QuantityTB.getValueAt(selected_row,0);
        
        int answer = JOptionPane.showConfirmDialog(
                        null, "Do you really want to delete it?", "Confirmation Dialog",
                        JOptionPane.YES_NO_OPTION);
        
        if(answer==JOptionPane.YES_OPTION) {
            if(st.deleteQuantityAndExpiredDate(itemindex, warehouseindex, date)) {
                WarehouseCBActionPerformed(null);
            }
        }
    }//GEN-LAST:event_QuantityDeleteButtonActionPerformed

    private void QuantityEditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityEditButtonActionPerformed
        int warehouseindex = getWarehouseIndex();
        if(warehouseindex==-1) 
            return;
        
        int selected_row = QuantityTB.getSelectedRow();
        if(selected_row==-1||QuantityTB.getValueAt(selected_row,1)==null)
            return;
        String date = (String)QuantityTB.getValueAt(selected_row,0);
        
        EditQuantityDialog editquantity_dialog = new EditQuantityDialog(
                null,true, st, itemindex, warehouseindex, date);
        editquantity_dialog.setVisible(true);
        String added_value = editquantity_dialog.getReturnValue();
        
        //error in database operation
        if(added_value.equals("-1")) {
            JOptionPane.showMessageDialog(null, "Error editing quantity.", "Error Dialog",
               JOptionPane.ERROR_MESSAGE);
            return;
        }
        //clicking cancel button
        else if(added_value.equals("-2")) {
            return;
        }
        
        QuantityTB.setValueAt(added_value, selected_row, 1);
    }//GEN-LAST:event_QuantityEditButtonActionPerformed

    private int getWarehouseIndex() {
        String warehousename = ((String)WarehouseCB.getSelectedItem()).toLowerCase();
        
        if(warehousename.equals("total")) {
            JOptionPane.showMessageDialog(null, "Warehouse must not be 'total'.",
                 "Warning Dialog", JOptionPane.WARNING_MESSAGE);
            return -1;
        }
        return st.getWarehouseIndex(warehousename);
    }
    
    private void QuantityAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantityAddButtonActionPerformed
        
        int warehouseindex = getWarehouseIndex();
        if(warehouseindex==-1) 
            return;
        
        AddQuantityDialog addquantity_dialog = new AddQuantityDialog(
                null,true, st, itemindex, warehouseindex);
        addquantity_dialog.setVisible(true);
        String[] added_value = addquantity_dialog.getReturnValue();
        
        if(added_value==null) {
            JOptionPane.showMessageDialog(null, "Error adding quantity and expired date.",
                 "Error Dialog", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //clicking cancel button
        else if(added_value.length==0) {
            return;
        }
        
        int total_row = QuantityTB.getRowCount();
        if(quantity_row_length==total_row) {
            ((DefaultTableModel)QuantityTB.getModel()).addRow( 
                            new Object[] { null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null } );
        
        }
        QuantityTB.setValueAt(added_value[0], quantity_row_length, 0);
        QuantityTB.setValueAt(added_value[1], quantity_row_length, 1);
        quantity_row_length++;
    }//GEN-LAST:event_QuantityAddButtonActionPerformed

    private void WarehouseCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WarehouseCBActionPerformed
        int warehouseindex = st.getWarehouseIndex(
                ((String)WarehouseCB.getSelectedItem()).toLowerCase());
        
        QuantityLB.setText("Total Quantity: " + 
                st.getTotalQuantityByWarehouseAndCode(
                  ((String)WarehouseCB.getSelectedItem()).toLowerCase(),item_code));
        
        ArrayList<String[]> quantity_expired_list = 
                st.setQuantityExpiredDateTable(warehouseindex,itemindex);
        
        DefaultTableModel quantity_expired_model = (DefaultTableModel)QuantityTB.getModel();
        
        GuiHelper.ClearAllTable(QuantityTB);
        quantity_row_length = quantity_expired_list.size();
        for(int i=0; i<quantity_row_length; i++) {
            if(i==quantity_expired_model.getRowCount()) {
                    ((DefaultTableModel)quantity_expired_model).addRow( 
                            new Object[] { null, null, null, null, null, null,
                    null, null, null, null, null, null, null, null, null, null } );
                }
            String[] single_list = (String[])quantity_expired_list.get(i);
            quantity_expired_model.setValueAt(single_list[0],i,0);
            quantity_expired_model.setValueAt(single_list[1],i,1);
        }
    }//GEN-LAST:event_WarehouseCBActionPerformed

    private void MoveSellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveSellerActionPerformed
        JButton button = (JButton)evt.getSource();
        
        if(button.getName().equals("toRight")) {
            sellerdb.moveSellerItem( AvSel, LsSel );
        }
        else if(button.getName().equals("toLeft")) {
            sellerdb.moveSellerItem( LsSel, AvSel );
        }
    }//GEN-LAST:event_MoveSellerActionPerformed

    private void VolumeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolumeCheckBoxActionPerformed
        //if user de-select volume of size
        if(!VolumeCheckBox.isSelected()) {
            //select the detail checkbox
            DetailSizeCheckBox.setSelected(true);

            //disable the volume text field
            VolumeTF.setEnabled(false);
            VolumeTF.setText("");
            VolumeLabel.setText("Volume : ");

            //reenable the detail of size text field
            LengthTF.setEnabled(true);
            LengthLabel.setText("* Length : ");
            WidthTF.setEnabled(true);
            WidthLabel.setText("* Width : ");
            HeightTF.setEnabled(true);   
            HeightLabel.setText("* Height : ");
        }
        else {
            //dis-select the detail checkbox
            DetailSizeCheckBox.setSelected(false);

            //empty the detail text field and disable it
            LengthTF.setText("");
            LengthTF.setEnabled(false);
            LengthLabel.setText("Length : ");
            WidthTF.setText("");
            WidthTF.setEnabled(false);
            WidthLabel.setText("Width : ");
            HeightTF.setText("");
            HeightTF.setEnabled(false);
            HeightLabel.setText("Height : ");

            //reenable volume text field
            VolumeTF.setEnabled(true);    
            VolumeLabel.setText("* Volume : ");
        }
    }//GEN-LAST:event_VolumeCheckBoxActionPerformed

    private void DetailSizeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailSizeCheckBoxActionPerformed
        if(!DetailSizeCheckBox.isSelected()) {
            //select the volume checkbox
            VolumeCheckBox.setSelected(true);

            //enable the volume text field
            VolumeTF.setEnabled(true);
            VolumeLabel.setText("* Volume : ");

            //disable the detail of size text field
            LengthTF.setText("");
            LengthTF.setEnabled(false);
            LengthLabel.setText("Length : ");
            WidthTF.setText("");
            WidthTF.setEnabled(false);
            WidthLabel.setText("Width : ");
            HeightTF.setText("");
            HeightTF.setEnabled(false);
            HeightLabel.setText("Height : ");
        }
        else {
            //dis-select the volume checkbox
            VolumeCheckBox.setSelected(false);
            VolumeLabel.setText("Volume : ");

            //empty the volume text field and disable it
            VolumeTF.setText("");
            VolumeTF.setEnabled(false);

            //reenable the detail of size text field
            LengthTF.setEnabled(true);
            LengthLabel.setText("* Length : ");
            WidthTF.setEnabled(true);
            WidthLabel.setText("* Width : ");
            HeightTF.setEnabled(true);   
            HeightLabel.setText("* Height : ");
        }
    }//GEN-LAST:event_DetailSizeCheckBoxActionPerformed

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        //the tabbed pane
        final int item = 0;
        final int additional = 1;
        final int prodandsel = 2;
        
        //get data from dialog text field
        String name = nameTF.getText().trim();
        String itemcode = itemCodeTF.getText().trim();
        String buyingprice = buyingPriceTF.getText().trim();
        String saleprice = salePriceTF.getText().trim();
        String comment = commentTA.getText();
        String primary = PrimaryTF.getText().trim();
        String secondary = SecondaryTF.getText().trim();
        String category = categoryTF.getText().trim();
        String length, width, height, volume;
        Integer intvolume, intlength, intwidth, intheight;
        String measurement = MeasurementTF.getText().trim();
        String producer = (String)ProducerCoB.getSelectedItem();
        String secondarythirdmeasurement = SecondaryThirdMeasurementTF.getText().trim();
        String third = ThirdTF.getText().trim();
        
        //make sure the required fields are not null
        if(itemcode.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Item Code Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            itemCodeTF.requestFocusInWindow();
            return;
        }
        
        if(category.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Category Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            categoryTF.requestFocusInWindow();
            return;
        }
        
        if(name.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Name Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            nameTF.requestFocusInWindow();
            return;
        }
        
        if(buyingprice.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Buying Price Text " +
                    "Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            buyingPriceTF.requestFocusInWindow();
            return;
        }
        int intbuyingprice = Integer.parseInt(buyingprice);
        
        if(saleprice.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Sale Price Text Field!", 
                    "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(item);
            salePriceTF.requestFocusInWindow();
            return;
        }
        int intsaleprice = Integer.parseInt(saleprice);
        
        //if user fill the volume
        if(VolumeCheckBox.isSelected()) {
            volume = VolumeTF.getText().trim();
            if(volume.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Volume Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                VolumeTF.requestFocusInWindow();
                return;
            }
            intvolume = Integer.parseInt(volume);
            intlength = null;
            intwidth = null;
            intheight = null;
        }
        else { 
            length = LengthTF.getText().trim();
            if(length.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Length Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                LengthTF.requestFocusInWindow();
                return;
            }
            width = WidthTF.getText().trim();
            if(width.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Width Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                WidthTF.requestFocusInWindow();
                return;
            }
            height = HeightTF.getText().trim();
            if(height.equals("")) {
                JOptionPane.showMessageDialog(null,"Please insert the Height Text Field!", 
                        "Warning", JOptionPane.WARNING_MESSAGE );
                ItemTabbedPane.setSelectedIndex(additional);
                HeightTF.requestFocusInWindow();
                return;
            }
            intlength = Integer.parseInt(length);
            intwidth = Integer.parseInt(width);
            intheight = Integer.parseInt(height);
            intvolume = intlength * intwidth * intheight;
        }
        
        if(primary.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Primary Measurement " +
                    "Text Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(additional);
            PrimaryTF.requestFocusInWindow();
            return;
        }

        if(secondary.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Secondary Measurement " +
                    "Text Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(additional);
            SecondaryTF.requestFocusInWindow();
            return;
        }
        
        if(measurement.equals("")) {
            JOptionPane.showMessageDialog(null,"Please insert the Measurement " +
                    "Text Field!", "Warning", JOptionPane.WARNING_MESSAGE );
            ItemTabbedPane.setSelectedIndex(additional);
            MeasurementTF.requestFocusInWindow();
            return;
        }
        
        
        //check if it is the valid name
        String oldname = (String)table.getModel().getValueAt(row,2);
        if(!st.UpdateValidName(oldname, name)) {
            JOptionPane.showMessageDialog(null,"The name is already used by other item! ",
                    "Warning", JOptionPane.WARNING_MESSAGE );
            return;
        }
        
        boolean result = st.updateItem( itemindex, category, name, itemcode, comment, 
                intbuyingprice, intsaleprice, intlength, intwidth, intheight, intvolume, 
                primary, secondary, measurement, producer, third, 
                secondarythirdmeasurement, null );
        
        //error editing item data
        if(!result) {
            JOptionPane.showMessageDialog(null,"Error editing item data! See log file " +
                    "for detail!", "Warning", JOptionPane.WARNING_MESSAGE );
        }
        else {
            //update the seller item
            result = sellerdb.insertItemSeller( (DefaultListModel)LsSel.getModel(), name );

            //error editing item data
            if(!result) {
                JOptionPane.showMessageDialog(null,"Error inserting item suplier data! See log file " +
                        "for detail!", "Warning", JOptionPane.WARNING_MESSAGE );
            }
        }
        
        //release the resources
        dispose();
    }//GEN-LAST:event_OKActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        dispose();
    }//GEN-LAST:event_CancelActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditItemDialog(new javax.swing.JFrame(), true, null, 
                        null).setVisible(true);
            }
        });
    }
   
    private javax.swing.JTable table;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSeller;
    private javax.swing.JPanel AdditionalPropertiesPanel;
    private javax.swing.JList AvSel;
    private javax.swing.JScrollPane AvailableSeller;
    private javax.swing.JLabel AvailableSellers;
    private javax.swing.JPanel BottomPanel;
    private javax.swing.JButton Cancel;
    private javax.swing.JCheckBox DetailSizeCheckBox;
    private javax.swing.JLabel DummyTopLabel;
    private javax.swing.JLabel HeightLabel;
    private javax.swing.JTextField HeightTF;
    private javax.swing.JLabel ItemCodeLabel;
    private javax.swing.JPanel ItemPanel;
    private javax.swing.JLabel ItemSellers;
    private javax.swing.JTabbedPane ItemTabbedPane;
    private javax.swing.JLabel LeftDummyLabel;
    private javax.swing.JLabel LengthLabel;
    private javax.swing.JTextField LengthTF;
    private javax.swing.JScrollPane ListSeller;
    private javax.swing.JList LsSel;
    private javax.swing.JLabel MeasurementLabel;
    private javax.swing.JTextField MeasurementTF;
    private javax.swing.JLabel Notes1;
    private javax.swing.JLabel Notes2;
    private javax.swing.JLabel Notes3;
    private javax.swing.JLabel Notes4;
    private javax.swing.JButton OK;
    private javax.swing.JPanel OtherPanel;
    private javax.swing.JLabel PrimaryMeasurementLabel;
    private javax.swing.JTextField PrimaryTF;
    private javax.swing.JComboBox ProducerCoB;
    private javax.swing.JLabel ProducerLB;
    private javax.swing.JPanel PropertiesPanel;
    private javax.swing.JButton QuantityAddButton;
    private javax.swing.JPanel QuantityButtonPanel;
    private javax.swing.JButton QuantityDeleteButton;
    private javax.swing.JButton QuantityEditButton;
    private javax.swing.JLabel QuantityLB;
    private javax.swing.JPanel QuantityPanel;
    private javax.swing.JScrollPane QuantityScrollPane;
    private javax.swing.JTable QuantityTB;
    private javax.swing.JPanel QuantityTablePanel;
    private javax.swing.JButton RemoveSeller;
    private javax.swing.JLabel RightDummyLabel;
    private javax.swing.JLabel SecondaryMeasurementLabel;
    private javax.swing.JTextField SecondaryTF;
    private javax.swing.JTextField SecondaryThirdMeasurementTF;
    private javax.swing.JLabel Secondary_Third_Measurement_Label;
    private javax.swing.JTextField ThirdTF;
    private javax.swing.JLabel Third_Measurement_Label;
    private javax.swing.JCheckBox VolumeCheckBox;
    private javax.swing.JLabel VolumeLabel;
    private javax.swing.JTextField VolumeTF;
    private javax.swing.JComboBox WarehouseCB;
    private javax.swing.JLabel WidthLabel;
    private javax.swing.JTextField WidthTF;
    private javax.swing.JLabel buyingPriceLabel;
    private javax.swing.JTextField buyingPriceTF;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JTextField categoryTF;
    private javax.swing.JLabel commentLabel;
    private javax.swing.JTextArea commentTA;
    private javax.swing.JTextField itemCodeTF;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTF;
    private javax.swing.JLabel salePriceLabel;
    private javax.swing.JTextField salePriceTF;
    // End of variables declaration//GEN-END:variables
    
}
